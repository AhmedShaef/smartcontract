// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package crowd

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// CrowdMetaData contains all meta data concerning the Crowd contract.
var CrowdMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weiTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"etherInvestmentObjective\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"EventInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"EventLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"EventRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"EventTokenAssignment\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CrowdSaleToken\",\"outputs\":[{\"internalType\":\"contractReleasableSimpleCoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"InvestmentAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"InvestmentReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"InvestmentRefunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IsFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IsRefundingAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Refund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WeiInvestmentObjective\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WeiTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162003ffa38038062003ffa8339818101604052810190620000379190620002c6565b428410156200007d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200007490620003bf565b60405180910390fd5b83831015620000c3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000ba9062000457565b60405180910390fd5b6000820362000109576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200010090620004ef565b60405180910390fd5b600081036200014f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001469062000587565b60405180910390fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060146101000a81548160ff02191690831515021790555060008060156101000a81548160ff021916908315150217905550836001819055508260028190555081600381905550670de0b6b3a764000081620001ee9190620005d8565b6004819055506000604051620002049062000278565b62000210919062000670565b604051809103906000f0801580156200022d573d6000803e3d6000fd5b50600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050506200068d565b611f5780620020a383390190565b600080fd5b6000819050919050565b620002a0816200028b565b8114620002ac57600080fd5b50565b600081519050620002c08162000295565b92915050565b60008060008060808587031215620002e357620002e262000286565b5b6000620002f387828801620002af565b94505060206200030687828801620002af565b93505060406200031987828801620002af565b92505060606200032c87828801620002af565b91505092959194509250565b600082825260208201905092915050565b7f73746172742074696d65206d7573742062652067726561746572207468616e2060008201527f7468652063757272656e7420626c6f636b2074696d657374616d700000000000602082015250565b6000620003a7603b8362000338565b9150620003b48262000349565b604082019050919050565b60006020820190508181036000830152620003da8162000398565b9050919050565b7f656e642074696d65206d7573742062652067726561746572207468616e206f7260008201527f20657175616c20746f2074686520737461727454696d65000000000000000000602082015250565b60006200043f60378362000338565b91506200044c82620003e1565b604082019050919050565b60006020820190508181036000830152620004728162000430565b9050919050565b7f77656920746f6b656e207072696365206d75737420626520677265617465722060008201527f7468616e207a65726f0000000000000000000000000000000000000000000000602082015250565b6000620004d760298362000338565b9150620004e48262000479565b604082019050919050565b600060208201905081810360008301526200050a81620004c8565b9050919050565b7f657468657220696e766573746d656e74206f626a656374697665206d7573742060008201527f62652067726561746572207468616e207a65726f000000000000000000000000602082015250565b60006200056f60348362000338565b91506200057c8262000511565b604082019050919050565b60006020820190508181036000830152620005a28162000560565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620005e5826200028b565b9150620005f2836200028b565b925082820262000602816200028b565b915082820484148315176200061c576200061b620005a9565b5b5092915050565b6000819050919050565b6000819050919050565b600062000658620006526200064c8462000623565b6200062d565b6200028b565b9050919050565b6200066a8162000637565b82525050565b60006020820190506200068760008301846200065f565b92915050565b611a06806200069d6000396000f3fe6080604052600436106100dd5760003560e01c8063b781d3dc1161007f578063ce9c97dc11610059578063ce9c97dc1461023a578063d95e521f14610265578063e7c1508d14610290578063fc4a4a1e146102cd576100dd565b8063b781d3dc146101ee578063c081996114610219578063c5454d1114610223576100dd565b80635ca8f488116100bb5780635ca8f488146101635780635d2686291461018e5780637bde161b14610198578063b4a99a4e146101c3576100dd565b8063015497b1146100e2578063333609781461010d5780634afd97c514610138575b600080fd5b3480156100ee57600080fd5b506100f76102f8565b6040516101049190610e8c565b60405180910390f35b34801561011957600080fd5b5061012261030b565b60405161012f9190610ec0565b60405180910390f35b34801561014457600080fd5b5061014d610311565b60405161015a9190610e8c565b60405180910390f35b34801561016f57600080fd5b50610178610324565b6040516101859190610ec0565b60405180910390f35b61019661032a565b005b3480156101a457600080fd5b506101ad61057c565b6040516101ba9190610ec0565b60405180910390f35b3480156101cf57600080fd5b506101d8610582565b6040516101e59190610f1c565b60405180910390f35b3480156101fa57600080fd5b506102036105a6565b6040516102109190610ec0565b60405180910390f35b6102216105ac565b005b34801561022f57600080fd5b50610238610742565b005b34801561024657600080fd5b5061024f61091f565b60405161025c9190610ec0565b60405180910390f35b34801561027157600080fd5b5061027a610925565b6040516102879190610f96565b60405180910390f35b34801561029c57600080fd5b506102b760048036038101906102b29190610fe2565b61094b565b6040516102c49190610ec0565b60405180910390f35b3480156102d957600080fd5b506102e2610963565b6040516102ef9190610ec0565b60405180910390f35b600060159054906101000a900460ff1681565b60025481565b600060149054906101000a900460ff1681565b60075481565b600060159054906101000a900460ff16610379576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037090611092565b60405180910390fd5b60003390506000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008103610405576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fc90611124565b60405180910390fd5b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806007600082825461045c9190611173565b925050819055507fcca3b14e2dd99bd5762da121af2060891ac5835e0beeb5e1fbf018c4563cb69f82826040516104949291906111a7565b60405180910390a17fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a6104c682610969565b6104cf84610af1565b6040516020016104e092919061128d565b6040516020818303038152906040526040516104fc9190611319565b60405180910390a18173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050610578576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056f906113ad565b60405180910390fd5b5050565b60035481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b60006105b734610cb4565b90508060000151156106045780602001516040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fb9190611319565b60405180910390fd5b6000339050600034905080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461065d9190611173565b9250508190555080600660008282546106769190611173565b925050819055506106878282610cfc565b8173ffffffffffffffffffffffffffffffffffffffff167f71d5edd14dd2e6321ec4c2850640644474e26e8f15774b1031766c5e853edc35826040516106cd9190610ec0565b60405180910390a27fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a6106ff83610af1565b61070883610969565b604051602001610719929190611419565b6040516020818303038152906040526040516107359190611319565b60405180910390a1505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461079a57600080fd5b600060149054906101000a900460ff16156107ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e1906114a7565b60405180910390fd5b600454600654106108b157600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df3164c66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561085f57600080fd5b505af1158015610873573d6000803e3d6000fd5b505050507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a6040516108a490611513565b60405180910390a1610902565b6001600060156101000a81548160ff0219169083151502179055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a6040516108f9906115a5565b60405180910390a15b6001600060146101000a81548160ff021916908315150217905550565b60045481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60056020528060005260406000206000915090505481565b60015481565b6060600082036109b0576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610aec565b600082905060005b600082146109e25780806109cb906115c5565b915050600a826109db919061163c565b91506109b8565b60008167ffffffffffffffff8111156109fe576109fd61166d565b5b6040519080825280601f01601f191660200182016040528015610a305781602001600182028036833780820191505090505b50905060008290505b60008614610ae457600181610a4e919061169c565b90506000600a8088610a60919061163c565b610a6a91906116d0565b87610a75919061169c565b6030610a81919061171f565b905060008160f81b905080848481518110610a9f57610a9e611754565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a88610adb919061163c565b97505050610a39565b819450505050505b919050565b60606000602867ffffffffffffffff811115610b1057610b0f61166d565b5b6040519080825280601f01601f191660200182016040528015610b425781602001600182028036833780820191505090505b50905060005b6014811015610caa576000816013610b60919061169c565b6008610b6c91906116d0565b6002610b7891906118b6565b8573ffffffffffffffffffffffffffffffffffffffff16610b99919061163c565b60f81b9050600060108260f81c610bb09190611901565b60f81b905060008160f81c6010610bc79190611932565b8360f81c610bd5919061196f565b60f81b9050610be382610d9d565b85856002610bf191906116d0565b81518110610c0257610c01611754565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610c3a81610d9d565b856001866002610c4a91906116d0565b610c549190611173565b81518110610c6557610c64611754565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505050508080610ca2906115c5565b915050610b48565b5080915050919050565b610cbc610e55565b60008203610cec57610ce56040518060600160405280602c81526020016119a5602c9139610de3565b9050610cf7565b610cf4610e0a565b90505b919050565b6000610d0782610e3e565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630f6798a584836040518363ffffffff1660e01b8152600401610d669291906111a7565b600060405180830381600087803b158015610d8057600080fd5b505af1158015610d94573d6000803e3d6000fd5b50505050505050565b6000600a8260f81c60ff161015610dc85760308260f81c610dbe919061171f565b60f81b9050610dde565b60578260f81c610dd8919061171f565b60f81b90505b919050565b610deb610e55565b6040518060400160405280600115158152602001838152509050919050565b610e12610e55565b604051806040016040528060001515815260200160405180602001604052806000815250815250905090565b600060035482610e4e919061163c565b9050919050565b6040518060400160405280600015158152602001606081525090565b60008115159050919050565b610e8681610e71565b82525050565b6000602082019050610ea16000830184610e7d565b92915050565b6000819050919050565b610eba81610ea7565b82525050565b6000602082019050610ed56000830184610eb1565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f0682610edb565b9050919050565b610f1681610efb565b82525050565b6000602082019050610f316000830184610f0d565b92915050565b6000819050919050565b6000610f5c610f57610f5284610edb565b610f37565b610edb565b9050919050565b6000610f6e82610f41565b9050919050565b6000610f8082610f63565b9050919050565b610f9081610f75565b82525050565b6000602082019050610fab6000830184610f87565b92915050565b600080fd5b610fbf81610efb565b8114610fca57600080fd5b50565b600081359050610fdc81610fb6565b92915050565b600060208284031215610ff857610ff7610fb1565b5b600061100684828501610fcd565b91505092915050565b600082825260208201905092915050565b7f726566756e64206973206e6f7420616c6c6f776564206174207468697320746960008201527f6d65000000000000000000000000000000000000000000000000000000000000602082015250565b600061107c60228361100f565b915061108782611020565b604082019050919050565b600060208201905081810360008301526110ab8161106f565b9050919050565b7f7468697320696e766573746f7220686173206e6f206d6f6e657920746f20726560008201527f66756e6400000000000000000000000000000000000000000000000000000000602082015250565b600061110e60248361100f565b9150611119826110b2565b604082019050919050565b6000602082019050818103600083015261113d81611101565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061117e82610ea7565b915061118983610ea7565b92508282019050808211156111a1576111a0611144565b5b92915050565b60006040820190506111bc6000830185610f0d565b6111c96020830184610eb1565b9392505050565b7f726566756e64206f662000000000000000000000000000000000000000000000815250565b600081519050919050565b600081905092915050565b60005b8381101561122a57808201518184015260208101905061120f565b60008484015250505050565b6000611241826111f6565b61124b8185611201565b935061125b81856020860161120c565b80840191505092915050565b7f2070726f766964656420746f20696e766573746f722000000000000000000000815250565b6000611298826111d0565b600a820191506112a88285611236565b91506112b382611267565b6016820191506112c38284611236565b91508190509392505050565b6000601f19601f8301169050919050565b60006112eb826111f6565b6112f5818561100f565b935061130581856020860161120c565b61130e816112cf565b840191505092915050565b6000602082019050818103600083015261133381846112e0565b905092915050565b7f756e61626c6520746f2073656e6420696e766573746d656e7420746f20696e7660008201527f6573746f72000000000000000000000000000000000000000000000000000000602082015250565b600061139760258361100f565b91506113a28261133b565b604082019050919050565b600060208201905081810360008301526113c68161138a565b9050919050565b7f696e766573746f72200000000000000000000000000000000000000000000000815250565b7f20726563656976656420696e766573746d656e74206f66200000000000000000815250565b6000611424826113cd565b6009820191506114348285611236565b915061143f826113f3565b60188201915061144f8284611236565b91508190509392505050565b7f63726f776473616c6520697320616c72656164792066696e616c697a65640000600082015250565b6000611491601e8361100f565b915061149c8261145b565b602082019050919050565b600060208201905081810360008301526114c081611484565b9050919050565b7f6f626a656374697665206d65742c2072656c656173696e672066756e64730000600082015250565b60006114fd601e8361100f565b9150611508826114c7565b602082019050919050565b6000602082019050818103600083015261152c816114f0565b9050919050565b7f6f626a656374697665206e6f74206d65742c2072656c656173696e672072656660008201527f756e640000000000000000000000000000000000000000000000000000000000602082015250565b600061158f60238361100f565b915061159a82611533565b604082019050919050565b600060208201905081810360008301526115be81611582565b9050919050565b60006115d082610ea7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361160257611601611144565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061164782610ea7565b915061165283610ea7565b9250826116625761166161160d565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006116a782610ea7565b91506116b283610ea7565b92508282039050818111156116ca576116c9611144565b5b92915050565b60006116db82610ea7565b91506116e683610ea7565b92508282026116f481610ea7565b9150828204841483151761170b5761170a611144565b5b5092915050565b600060ff82169050919050565b600061172a82611712565b915061173583611712565b9250828201905060ff81111561174e5761174d611144565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156117da578086048111156117b6576117b5611144565b5b60018516156117c55780820291505b80810290506117d385611783565b945061179a565b94509492505050565b6000826117f357600190506118af565b8161180157600090506118af565b8160018114611817576002811461182157611850565b60019150506118af565b60ff84111561183357611832611144565b5b8360020a91508482111561184a57611849611144565b5b506118af565b5060208310610133831016604e8410600b84101617156118855782820a9050838111156118805761187f611144565b5b6118af565b6118928484846001611790565b925090508184048111156118a9576118a8611144565b5b81810290505b9392505050565b60006118c182610ea7565b91506118cc83610ea7565b92506118f97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846117e3565b905092915050565b600061190c82611712565b915061191783611712565b9250826119275761192661160d565b5b828204905092915050565b600061193d82611712565b915061194883611712565b925082820261195681611712565b915080821461196857611967611144565b5b5092915050565b600061197a82611712565b915061198583611712565b9250828203905060ff81111561199e5761199d611144565b5b9291505056fe696e766573746d656e74206d7573742062652067726561746572207468616e207a65726f20646f6c6c617273a26469706673582212204024e4bb6fede6177588d08efc4a108b44056c40bcba50f610de44bbce868bfd64736f6c63430008110033608060405260008060146101000a81548160ff0219169083151502179055503480156200002b57600080fd5b5060405162001f5738038062001f57833981810160405281019062000051919062000246565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000c360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682620000ca60201b60201c565b5062000310565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200012357600080fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254620001749190620002a7565b925050819055508173ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f64af04e507117cfe690abc373ad27eb3c6a0b3202af0972ff3dc089e501e3a4583604051620001fa9190620002f3565b60405180910390a35050565b600080fd5b6000819050919050565b62000220816200020b565b81146200022c57600080fd5b50565b600081519050620002408162000215565b92915050565b6000602082840312156200025f576200025e62000206565b5b60006200026f848285016200022f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620002b4826200020b565b9150620002c1836200020b565b9250828201905080821115620002dc57620002db62000278565b5b92915050565b620002ed816200020b565b82525050565b60006020820190506200030a6000830184620002e2565b92915050565b611c3780620003206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638bdf1534116100715780638bdf153414610164578063ab31471e14610194578063b4a99a4e146101c4578063c0d84ce5146101e2578063d16a7a4b146101fe578063df3164c61461021a576100a9565b80630f6798a5146100ae57806320d29efe146100ca5780636386a433146100e857806369ca02dd146101185780636dcdd00f14610134575b600080fd5b6100c860048036038101906100c39190611290565b610224565b005b6100d261035b565b6040516100df91906112eb565b60405180910390f35b61010260048036038101906100fd9190611290565b61036e565b60405161010f91906112eb565b60405180910390f35b610132600480360381019061012d9190611290565b6103fb565b005b61014e60048036038101906101499190611306565b610631565b60405161015b9190611355565b60405180910390f35b61017e60048036038101906101799190611370565b610656565b60405161018b9190611355565b60405180910390f35b6101ae60048036038101906101a99190611370565b61066e565b6040516101bb91906112eb565b60405180910390f35b6101cc61068e565b6040516101d991906113ac565b60405180910390f35b6101fc60048036038101906101f791906113c7565b6106b2565b005b61021860048036038101906102139190611446565b610972565b005b610222610a5e565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461027c57600080fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102cb91906114b5565b925050819055508173ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f64af04e507117cfe690abc373ad27eb3c6a0b3202af0972ff3dc089e501e3a458360405161034f9190611355565b60405180910390a35050565b600060149054906101000a900460ff1681565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b6000610408338484610ad3565b90508060000151156104555780602001516040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044c9190611579565b60405180910390fd5b600060149054906101000a900460ff16156105f35781600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104b9919061159b565b9250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461050f91906114b5565b925050819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a61054083610d57565b61054985610edf565b61055233610edf565b6040516020016105649392919061167d565b6040516020818303038152906040526040516105809190611579565b60405180910390a18273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f64af04e507117cfe690abc373ad27eb3c6a0b3202af0972ff3dc089e501e3a45846040516105e59190611355565b60405180910390a35061062d565b7fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a60405161062090611727565b60405180910390a1600080fd5b5050565b6002602052816000526040600020602052806000526040600020600091509150505481565b60016020528060005260406000206000915090505481565b60036020528060005260406000206000915054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006106bf848484610ad3565b905080600001511561070c5780602001516040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107039190611579565b60405180910390fd5b600060149054906101000a900460ff16156109385781600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610770919061159b565b9250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107c691906114b5565b9250508190555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610859919061159b565b925050819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a61088a83610d57565b61089385610edf565b61089c87610edf565b6040516020016108ae9392919061176d565b6040516020818303038152906040526040516108ca9190611579565b60405180910390a18273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f64af04e507117cfe690abc373ad27eb3c6a0b3202af0972ff3dc089e501e3a458460405161092f9190611355565b60405180910390a35b7fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a60405161096590611727565b60405180910390a1600080fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109ca57600080fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f3ed8718a0f403576721b15da1095392a64cc33255a766b58bf4d5a0e116bcb1d8282604051610a529291906117cb565b60405180910390a15050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ab657600080fd5b6001600060146101000a81548160ff021916908315150217905550565b610adb6111db565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610b5457610b4d6040518060400160405280601f81526020017f63616e27742073656e64206d6f6e657920746f206164647265737320307830008152506110a2565b9050610d50565b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610c6757610c606040518060400160405280601781526020017f696e737566666963656e742066756e6473202062616c3a000000000000000000815250610c1c600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d57565b6040518060400160405280600a81526020017f2020616d6f756e743a2000000000000000000000000000000000000000000000815250610c5b86610d57565b6110c9565b9050610d50565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610cf291906114b5565b11610d4557610d3e6040518060400160405280601081526020017f696e76616c696420616d6f756e743a2000000000000000000000000000000000815250610d3984610d57565b611118565b9050610d50565b610d4d611161565b90505b9392505050565b606060008203610d9e576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610eda565b600082905060005b60008214610dd0578080610db9906117f4565b915050600a82610dc9919061186b565b9150610da6565b60008167ffffffffffffffff811115610dec57610deb61189c565b5b6040519080825280601f01601f191660200182016040528015610e1e5781602001600182028036833780820191505090505b50905060008290505b60008614610ed257600181610e3c919061159b565b90506000600a8088610e4e919061186b565b610e5891906118cb565b87610e63919061159b565b6030610e6f919061191a565b905060008160f81b905080848481518110610e8d57610e8c61194f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a88610ec9919061186b565b97505050610e27565b819450505050505b919050565b60606000602867ffffffffffffffff811115610efe57610efd61189c565b5b6040519080825280601f01601f191660200182016040528015610f305781602001600182028036833780820191505090505b50905060005b6014811015611098576000816013610f4e919061159b565b6008610f5a91906118cb565b6002610f669190611ab1565b8573ffffffffffffffffffffffffffffffffffffffff16610f87919061186b565b60f81b9050600060108260f81c610f9e9190611afc565b60f81b905060008160f81c6010610fb59190611b2d565b8360f81c610fc39190611b6a565b60f81b9050610fd182611195565b85856002610fdf91906118cb565b81518110610ff057610fef61194f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061102881611195565b85600186600261103891906118cb565b61104291906114b5565b815181106110535761105261194f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505050508080611090906117f4565b915050610f36565b5080915050919050565b6110aa6111db565b6040518060400160405280600115158152602001838152509050919050565b6110d16111db565b6040518060400160405280600115158152602001868686866040516020016110fc9493929190611b9f565b6040516020818303038152906040528152509050949350505050565b6111206111db565b60405180604001604052806001151581526020018484604051602001611147929190611bdd565b604051602081830303815290604052815250905092915050565b6111696111db565b604051806040016040528060001515815260200160405180602001604052806000815250815250905090565b6000600a8260f81c60ff1610156111c05760308260f81c6111b6919061191a565b60f81b90506111d6565b60578260f81c6111d0919061191a565b60f81b90505b919050565b6040518060400160405280600015158152602001606081525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611227826111fc565b9050919050565b6112378161121c565b811461124257600080fd5b50565b6000813590506112548161122e565b92915050565b6000819050919050565b61126d8161125a565b811461127857600080fd5b50565b60008135905061128a81611264565b92915050565b600080604083850312156112a7576112a66111f7565b5b60006112b585828601611245565b92505060206112c68582860161127b565b9150509250929050565b60008115159050919050565b6112e5816112d0565b82525050565b600060208201905061130060008301846112dc565b92915050565b6000806040838503121561131d5761131c6111f7565b5b600061132b85828601611245565b925050602061133c85828601611245565b9150509250929050565b61134f8161125a565b82525050565b600060208201905061136a6000830184611346565b92915050565b600060208284031215611386576113856111f7565b5b600061139484828501611245565b91505092915050565b6113a68161121c565b82525050565b60006020820190506113c1600083018461139d565b92915050565b6000806000606084860312156113e0576113df6111f7565b5b60006113ee86828701611245565b93505060206113ff86828701611245565b92505060406114108682870161127b565b9150509250925092565b611423816112d0565b811461142e57600080fd5b50565b6000813590506114408161141a565b92915050565b6000806040838503121561145d5761145c6111f7565b5b600061146b85828601611245565b925050602061147c85828601611431565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114c08261125a565b91506114cb8361125a565b92508282019050808211156114e3576114e2611486565b5b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611523578082015181840152602081019050611508565b60008484015250505050565b6000601f19601f8301169050919050565b600061154b826114e9565b61155581856114f4565b9350611565818560208601611505565b61156e8161152f565b840191505092915050565b600060208201905081810360008301526115938184611540565b905092915050565b60006115a68261125a565b91506115b18361125a565b92508282039050818111156115c9576115c8611486565b5b92915050565b7f7472616e73666572656420000000000000000000000000000000000000000000815250565b600081905092915050565b600061160b826114e9565b61161581856115f5565b9350611625818560208601611505565b80840191505092915050565b7f20746f2000000000000000000000000000000000000000000000000000000000815250565b7f2066726f6d200000000000000000000000000000000000000000000000000000815250565b6000611688826115cf565b600b820191506116988286611600565b91506116a382611631565b6004820191506116b38285611600565b91506116be82611657565b6006820191506116ce8284611600565b9150819050949350505050565b7f746f6b656e73206e6f742072656c656173656420796574000000000000000000600082015250565b60006117116017836114f4565b915061171c826116db565b602082019050919050565b6000602082019050818103600083015261174081611704565b9050919050565b7f7472616e73666572656420616d6f756e74200000000000000000000000000000815250565b600061177882611747565b6012820191506117888286611600565b915061179382611631565b6004820191506117a38285611600565b91506117ae82611657565b6006820191506117be8284611600565b9150819050949350505050565b60006040820190506117e0600083018561139d565b6117ed60208301846112dc565b9392505050565b60006117ff8261125a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361183157611830611486565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006118768261125a565b91506118818361125a565b9250826118915761189061183c565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006118d68261125a565b91506118e18361125a565b92508282026118ef8161125a565b9150828204841483151761190657611905611486565b5b5092915050565b600060ff82169050919050565b60006119258261190d565b91506119308361190d565b9250828201905060ff81111561194957611948611486565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156119d5578086048111156119b1576119b0611486565b5b60018516156119c05780820291505b80810290506119ce8561197e565b9450611995565b94509492505050565b6000826119ee5760019050611aaa565b816119fc5760009050611aaa565b8160018114611a125760028114611a1c57611a4b565b6001915050611aaa565b60ff841115611a2e57611a2d611486565b5b8360020a915084821115611a4557611a44611486565b5b50611aaa565b5060208310610133831016604e8410600b8410161715611a805782820a905083811115611a7b57611a7a611486565b5b611aaa565b611a8d848484600161198b565b92509050818404811115611aa457611aa3611486565b5b81810290505b9392505050565b6000611abc8261125a565b9150611ac78361125a565b9250611af47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846119de565b905092915050565b6000611b078261190d565b9150611b128361190d565b925082611b2257611b2161183c565b5b828204905092915050565b6000611b388261190d565b9150611b438361190d565b9250828202611b518161190d565b9150808214611b6357611b62611486565b5b5092915050565b6000611b758261190d565b9150611b808361190d565b9250828203905060ff811115611b9957611b98611486565b5b92915050565b6000611bab8287611600565b9150611bb78286611600565b9150611bc38285611600565b9150611bcf8284611600565b915081905095945050505050565b6000611be98285611600565b9150611bf58284611600565b9150819050939250505056fea26469706673582212204972e701f03d2abf12cab388aa29e16743e02e13727c95db4fbfad9de92bc37564736f6c63430008110033",
}

// CrowdABI is the input ABI used to generate the binding from.
// Deprecated: Use CrowdMetaData.ABI instead.
var CrowdABI = CrowdMetaData.ABI

// CrowdBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CrowdMetaData.Bin instead.
var CrowdBin = CrowdMetaData.Bin

// DeployCrowd deploys a new Ethereum contract, binding an instance of Crowd to it.
func DeployCrowd(auth *bind.TransactOpts, backend bind.ContractBackend, startTime *big.Int, endTime *big.Int, weiTokenPrice *big.Int, etherInvestmentObjective *big.Int) (common.Address, *types.Transaction, *Crowd, error) {
	parsed, err := CrowdMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CrowdBin), backend, startTime, endTime, weiTokenPrice, etherInvestmentObjective)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Crowd{CrowdCaller: CrowdCaller{contract: contract}, CrowdTransactor: CrowdTransactor{contract: contract}, CrowdFilterer: CrowdFilterer{contract: contract}}, nil
}

// Crowd is an auto generated Go binding around an Ethereum contract.
type Crowd struct {
	CrowdCaller     // Read-only binding to the contract
	CrowdTransactor // Write-only binding to the contract
	CrowdFilterer   // Log filterer for contract events
}

// CrowdCaller is an auto generated read-only Go binding around an Ethereum contract.
type CrowdCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrowdTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CrowdTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrowdFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CrowdFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrowdSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CrowdSession struct {
	Contract     *Crowd            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CrowdCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CrowdCallerSession struct {
	Contract *CrowdCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// CrowdTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CrowdTransactorSession struct {
	Contract     *CrowdTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CrowdRaw is an auto generated low-level Go binding around an Ethereum contract.
type CrowdRaw struct {
	Contract *Crowd // Generic contract binding to access the raw methods on
}

// CrowdCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CrowdCallerRaw struct {
	Contract *CrowdCaller // Generic read-only contract binding to access the raw methods on
}

// CrowdTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CrowdTransactorRaw struct {
	Contract *CrowdTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCrowd creates a new instance of Crowd, bound to a specific deployed contract.
func NewCrowd(address common.Address, backend bind.ContractBackend) (*Crowd, error) {
	contract, err := bindCrowd(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Crowd{CrowdCaller: CrowdCaller{contract: contract}, CrowdTransactor: CrowdTransactor{contract: contract}, CrowdFilterer: CrowdFilterer{contract: contract}}, nil
}

// NewCrowdCaller creates a new read-only instance of Crowd, bound to a specific deployed contract.
func NewCrowdCaller(address common.Address, caller bind.ContractCaller) (*CrowdCaller, error) {
	contract, err := bindCrowd(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CrowdCaller{contract: contract}, nil
}

// NewCrowdTransactor creates a new write-only instance of Crowd, bound to a specific deployed contract.
func NewCrowdTransactor(address common.Address, transactor bind.ContractTransactor) (*CrowdTransactor, error) {
	contract, err := bindCrowd(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CrowdTransactor{contract: contract}, nil
}

// NewCrowdFilterer creates a new log filterer instance of Crowd, bound to a specific deployed contract.
func NewCrowdFilterer(address common.Address, filterer bind.ContractFilterer) (*CrowdFilterer, error) {
	contract, err := bindCrowd(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CrowdFilterer{contract: contract}, nil
}

// bindCrowd binds a generic wrapper to an already deployed contract.
func bindCrowd(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CrowdABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Crowd *CrowdRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Crowd.Contract.CrowdCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Crowd *CrowdRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Crowd.Contract.CrowdTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Crowd *CrowdRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Crowd.Contract.CrowdTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Crowd *CrowdCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Crowd.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Crowd *CrowdTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Crowd.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Crowd *CrowdTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Crowd.Contract.contract.Transact(opts, method, params...)
}

// CrowdSaleToken is a free data retrieval call binding the contract method 0xd95e521f.
//
// Solidity: function CrowdSaleToken() view returns(address)
func (_Crowd *CrowdCaller) CrowdSaleToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Crowd.contract.Call(opts, &out, "CrowdSaleToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CrowdSaleToken is a free data retrieval call binding the contract method 0xd95e521f.
//
// Solidity: function CrowdSaleToken() view returns(address)
func (_Crowd *CrowdSession) CrowdSaleToken() (common.Address, error) {
	return _Crowd.Contract.CrowdSaleToken(&_Crowd.CallOpts)
}

// CrowdSaleToken is a free data retrieval call binding the contract method 0xd95e521f.
//
// Solidity: function CrowdSaleToken() view returns(address)
func (_Crowd *CrowdCallerSession) CrowdSaleToken() (common.Address, error) {
	return _Crowd.Contract.CrowdSaleToken(&_Crowd.CallOpts)
}

// EndTime is a free data retrieval call binding the contract method 0x33360978.
//
// Solidity: function EndTime() view returns(uint256)
func (_Crowd *CrowdCaller) EndTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Crowd.contract.Call(opts, &out, "EndTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EndTime is a free data retrieval call binding the contract method 0x33360978.
//
// Solidity: function EndTime() view returns(uint256)
func (_Crowd *CrowdSession) EndTime() (*big.Int, error) {
	return _Crowd.Contract.EndTime(&_Crowd.CallOpts)
}

// EndTime is a free data retrieval call binding the contract method 0x33360978.
//
// Solidity: function EndTime() view returns(uint256)
func (_Crowd *CrowdCallerSession) EndTime() (*big.Int, error) {
	return _Crowd.Contract.EndTime(&_Crowd.CallOpts)
}

// InvestmentAmountOf is a free data retrieval call binding the contract method 0xe7c1508d.
//
// Solidity: function InvestmentAmountOf(address ) view returns(uint256)
func (_Crowd *CrowdCaller) InvestmentAmountOf(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Crowd.contract.Call(opts, &out, "InvestmentAmountOf", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// InvestmentAmountOf is a free data retrieval call binding the contract method 0xe7c1508d.
//
// Solidity: function InvestmentAmountOf(address ) view returns(uint256)
func (_Crowd *CrowdSession) InvestmentAmountOf(arg0 common.Address) (*big.Int, error) {
	return _Crowd.Contract.InvestmentAmountOf(&_Crowd.CallOpts, arg0)
}

// InvestmentAmountOf is a free data retrieval call binding the contract method 0xe7c1508d.
//
// Solidity: function InvestmentAmountOf(address ) view returns(uint256)
func (_Crowd *CrowdCallerSession) InvestmentAmountOf(arg0 common.Address) (*big.Int, error) {
	return _Crowd.Contract.InvestmentAmountOf(&_Crowd.CallOpts, arg0)
}

// InvestmentReceived is a free data retrieval call binding the contract method 0xb781d3dc.
//
// Solidity: function InvestmentReceived() view returns(uint256)
func (_Crowd *CrowdCaller) InvestmentReceived(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Crowd.contract.Call(opts, &out, "InvestmentReceived")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// InvestmentReceived is a free data retrieval call binding the contract method 0xb781d3dc.
//
// Solidity: function InvestmentReceived() view returns(uint256)
func (_Crowd *CrowdSession) InvestmentReceived() (*big.Int, error) {
	return _Crowd.Contract.InvestmentReceived(&_Crowd.CallOpts)
}

// InvestmentReceived is a free data retrieval call binding the contract method 0xb781d3dc.
//
// Solidity: function InvestmentReceived() view returns(uint256)
func (_Crowd *CrowdCallerSession) InvestmentReceived() (*big.Int, error) {
	return _Crowd.Contract.InvestmentReceived(&_Crowd.CallOpts)
}

// InvestmentRefunded is a free data retrieval call binding the contract method 0x5ca8f488.
//
// Solidity: function InvestmentRefunded() view returns(uint256)
func (_Crowd *CrowdCaller) InvestmentRefunded(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Crowd.contract.Call(opts, &out, "InvestmentRefunded")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// InvestmentRefunded is a free data retrieval call binding the contract method 0x5ca8f488.
//
// Solidity: function InvestmentRefunded() view returns(uint256)
func (_Crowd *CrowdSession) InvestmentRefunded() (*big.Int, error) {
	return _Crowd.Contract.InvestmentRefunded(&_Crowd.CallOpts)
}

// InvestmentRefunded is a free data retrieval call binding the contract method 0x5ca8f488.
//
// Solidity: function InvestmentRefunded() view returns(uint256)
func (_Crowd *CrowdCallerSession) InvestmentRefunded() (*big.Int, error) {
	return _Crowd.Contract.InvestmentRefunded(&_Crowd.CallOpts)
}

// IsFinalized is a free data retrieval call binding the contract method 0x4afd97c5.
//
// Solidity: function IsFinalized() view returns(bool)
func (_Crowd *CrowdCaller) IsFinalized(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Crowd.contract.Call(opts, &out, "IsFinalized")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFinalized is a free data retrieval call binding the contract method 0x4afd97c5.
//
// Solidity: function IsFinalized() view returns(bool)
func (_Crowd *CrowdSession) IsFinalized() (bool, error) {
	return _Crowd.Contract.IsFinalized(&_Crowd.CallOpts)
}

// IsFinalized is a free data retrieval call binding the contract method 0x4afd97c5.
//
// Solidity: function IsFinalized() view returns(bool)
func (_Crowd *CrowdCallerSession) IsFinalized() (bool, error) {
	return _Crowd.Contract.IsFinalized(&_Crowd.CallOpts)
}

// IsRefundingAllowed is a free data retrieval call binding the contract method 0x015497b1.
//
// Solidity: function IsRefundingAllowed() view returns(bool)
func (_Crowd *CrowdCaller) IsRefundingAllowed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Crowd.contract.Call(opts, &out, "IsRefundingAllowed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsRefundingAllowed is a free data retrieval call binding the contract method 0x015497b1.
//
// Solidity: function IsRefundingAllowed() view returns(bool)
func (_Crowd *CrowdSession) IsRefundingAllowed() (bool, error) {
	return _Crowd.Contract.IsRefundingAllowed(&_Crowd.CallOpts)
}

// IsRefundingAllowed is a free data retrieval call binding the contract method 0x015497b1.
//
// Solidity: function IsRefundingAllowed() view returns(bool)
func (_Crowd *CrowdCallerSession) IsRefundingAllowed() (bool, error) {
	return _Crowd.Contract.IsRefundingAllowed(&_Crowd.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Crowd *CrowdCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Crowd.contract.Call(opts, &out, "Owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Crowd *CrowdSession) Owner() (common.Address, error) {
	return _Crowd.Contract.Owner(&_Crowd.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Crowd *CrowdCallerSession) Owner() (common.Address, error) {
	return _Crowd.Contract.Owner(&_Crowd.CallOpts)
}

// StartTime is a free data retrieval call binding the contract method 0xfc4a4a1e.
//
// Solidity: function StartTime() view returns(uint256)
func (_Crowd *CrowdCaller) StartTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Crowd.contract.Call(opts, &out, "StartTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StartTime is a free data retrieval call binding the contract method 0xfc4a4a1e.
//
// Solidity: function StartTime() view returns(uint256)
func (_Crowd *CrowdSession) StartTime() (*big.Int, error) {
	return _Crowd.Contract.StartTime(&_Crowd.CallOpts)
}

// StartTime is a free data retrieval call binding the contract method 0xfc4a4a1e.
//
// Solidity: function StartTime() view returns(uint256)
func (_Crowd *CrowdCallerSession) StartTime() (*big.Int, error) {
	return _Crowd.Contract.StartTime(&_Crowd.CallOpts)
}

// WeiInvestmentObjective is a free data retrieval call binding the contract method 0xce9c97dc.
//
// Solidity: function WeiInvestmentObjective() view returns(uint256)
func (_Crowd *CrowdCaller) WeiInvestmentObjective(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Crowd.contract.Call(opts, &out, "WeiInvestmentObjective")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WeiInvestmentObjective is a free data retrieval call binding the contract method 0xce9c97dc.
//
// Solidity: function WeiInvestmentObjective() view returns(uint256)
func (_Crowd *CrowdSession) WeiInvestmentObjective() (*big.Int, error) {
	return _Crowd.Contract.WeiInvestmentObjective(&_Crowd.CallOpts)
}

// WeiInvestmentObjective is a free data retrieval call binding the contract method 0xce9c97dc.
//
// Solidity: function WeiInvestmentObjective() view returns(uint256)
func (_Crowd *CrowdCallerSession) WeiInvestmentObjective() (*big.Int, error) {
	return _Crowd.Contract.WeiInvestmentObjective(&_Crowd.CallOpts)
}

// WeiTokenPrice is a free data retrieval call binding the contract method 0x7bde161b.
//
// Solidity: function WeiTokenPrice() view returns(uint256)
func (_Crowd *CrowdCaller) WeiTokenPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Crowd.contract.Call(opts, &out, "WeiTokenPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WeiTokenPrice is a free data retrieval call binding the contract method 0x7bde161b.
//
// Solidity: function WeiTokenPrice() view returns(uint256)
func (_Crowd *CrowdSession) WeiTokenPrice() (*big.Int, error) {
	return _Crowd.Contract.WeiTokenPrice(&_Crowd.CallOpts)
}

// WeiTokenPrice is a free data retrieval call binding the contract method 0x7bde161b.
//
// Solidity: function WeiTokenPrice() view returns(uint256)
func (_Crowd *CrowdCallerSession) WeiTokenPrice() (*big.Int, error) {
	return _Crowd.Contract.WeiTokenPrice(&_Crowd.CallOpts)
}

// Finalize is a paid mutator transaction binding the contract method 0xc5454d11.
//
// Solidity: function Finalize() returns()
func (_Crowd *CrowdTransactor) Finalize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Crowd.contract.Transact(opts, "Finalize")
}

// Finalize is a paid mutator transaction binding the contract method 0xc5454d11.
//
// Solidity: function Finalize() returns()
func (_Crowd *CrowdSession) Finalize() (*types.Transaction, error) {
	return _Crowd.Contract.Finalize(&_Crowd.TransactOpts)
}

// Finalize is a paid mutator transaction binding the contract method 0xc5454d11.
//
// Solidity: function Finalize() returns()
func (_Crowd *CrowdTransactorSession) Finalize() (*types.Transaction, error) {
	return _Crowd.Contract.Finalize(&_Crowd.TransactOpts)
}

// Invest is a paid mutator transaction binding the contract method 0xc0819961.
//
// Solidity: function Invest() payable returns()
func (_Crowd *CrowdTransactor) Invest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Crowd.contract.Transact(opts, "Invest")
}

// Invest is a paid mutator transaction binding the contract method 0xc0819961.
//
// Solidity: function Invest() payable returns()
func (_Crowd *CrowdSession) Invest() (*types.Transaction, error) {
	return _Crowd.Contract.Invest(&_Crowd.TransactOpts)
}

// Invest is a paid mutator transaction binding the contract method 0xc0819961.
//
// Solidity: function Invest() payable returns()
func (_Crowd *CrowdTransactorSession) Invest() (*types.Transaction, error) {
	return _Crowd.Contract.Invest(&_Crowd.TransactOpts)
}

// Refund is a paid mutator transaction binding the contract method 0x5d268629.
//
// Solidity: function Refund() payable returns()
func (_Crowd *CrowdTransactor) Refund(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Crowd.contract.Transact(opts, "Refund")
}

// Refund is a paid mutator transaction binding the contract method 0x5d268629.
//
// Solidity: function Refund() payable returns()
func (_Crowd *CrowdSession) Refund() (*types.Transaction, error) {
	return _Crowd.Contract.Refund(&_Crowd.TransactOpts)
}

// Refund is a paid mutator transaction binding the contract method 0x5d268629.
//
// Solidity: function Refund() payable returns()
func (_Crowd *CrowdTransactorSession) Refund() (*types.Transaction, error) {
	return _Crowd.Contract.Refund(&_Crowd.TransactOpts)
}

// CrowdEventInvestmentIterator is returned from FilterEventInvestment and is used to iterate over the raw logs and unpacked data for EventInvestment events raised by the Crowd contract.
type CrowdEventInvestmentIterator struct {
	Event *CrowdEventInvestment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrowdEventInvestmentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrowdEventInvestment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrowdEventInvestment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrowdEventInvestmentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrowdEventInvestmentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrowdEventInvestment represents a EventInvestment event raised by the Crowd contract.
type CrowdEventInvestment struct {
	Investor common.Address
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterEventInvestment is a free log retrieval operation binding the contract event 0x71d5edd14dd2e6321ec4c2850640644474e26e8f15774b1031766c5e853edc35.
//
// Solidity: event EventInvestment(address indexed investor, uint256 value)
func (_Crowd *CrowdFilterer) FilterEventInvestment(opts *bind.FilterOpts, investor []common.Address) (*CrowdEventInvestmentIterator, error) {

	var investorRule []interface{}
	for _, investorItem := range investor {
		investorRule = append(investorRule, investorItem)
	}

	logs, sub, err := _Crowd.contract.FilterLogs(opts, "EventInvestment", investorRule)
	if err != nil {
		return nil, err
	}
	return &CrowdEventInvestmentIterator{contract: _Crowd.contract, event: "EventInvestment", logs: logs, sub: sub}, nil
}

// WatchEventInvestment is a free log subscription operation binding the contract event 0x71d5edd14dd2e6321ec4c2850640644474e26e8f15774b1031766c5e853edc35.
//
// Solidity: event EventInvestment(address indexed investor, uint256 value)
func (_Crowd *CrowdFilterer) WatchEventInvestment(opts *bind.WatchOpts, sink chan<- *CrowdEventInvestment, investor []common.Address) (event.Subscription, error) {

	var investorRule []interface{}
	for _, investorItem := range investor {
		investorRule = append(investorRule, investorItem)
	}

	logs, sub, err := _Crowd.contract.WatchLogs(opts, "EventInvestment", investorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrowdEventInvestment)
				if err := _Crowd.contract.UnpackLog(event, "EventInvestment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEventInvestment is a log parse operation binding the contract event 0x71d5edd14dd2e6321ec4c2850640644474e26e8f15774b1031766c5e853edc35.
//
// Solidity: event EventInvestment(address indexed investor, uint256 value)
func (_Crowd *CrowdFilterer) ParseEventInvestment(log types.Log) (*CrowdEventInvestment, error) {
	event := new(CrowdEventInvestment)
	if err := _Crowd.contract.UnpackLog(event, "EventInvestment", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrowdEventLogIterator is returned from FilterEventLog and is used to iterate over the raw logs and unpacked data for EventLog events raised by the Crowd contract.
type CrowdEventLogIterator struct {
	Event *CrowdEventLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrowdEventLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrowdEventLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrowdEventLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrowdEventLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrowdEventLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrowdEventLog represents a EventLog event raised by the Crowd contract.
type CrowdEventLog struct {
	Value string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterEventLog is a free log retrieval operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Crowd *CrowdFilterer) FilterEventLog(opts *bind.FilterOpts) (*CrowdEventLogIterator, error) {

	logs, sub, err := _Crowd.contract.FilterLogs(opts, "EventLog")
	if err != nil {
		return nil, err
	}
	return &CrowdEventLogIterator{contract: _Crowd.contract, event: "EventLog", logs: logs, sub: sub}, nil
}

// WatchEventLog is a free log subscription operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Crowd *CrowdFilterer) WatchEventLog(opts *bind.WatchOpts, sink chan<- *CrowdEventLog) (event.Subscription, error) {

	logs, sub, err := _Crowd.contract.WatchLogs(opts, "EventLog")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrowdEventLog)
				if err := _Crowd.contract.UnpackLog(event, "EventLog", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEventLog is a log parse operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Crowd *CrowdFilterer) ParseEventLog(log types.Log) (*CrowdEventLog, error) {
	event := new(CrowdEventLog)
	if err := _Crowd.contract.UnpackLog(event, "EventLog", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrowdEventRefundIterator is returned from FilterEventRefund and is used to iterate over the raw logs and unpacked data for EventRefund events raised by the Crowd contract.
type CrowdEventRefundIterator struct {
	Event *CrowdEventRefund // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrowdEventRefundIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrowdEventRefund)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrowdEventRefund)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrowdEventRefundIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrowdEventRefundIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrowdEventRefund represents a EventRefund event raised by the Crowd contract.
type CrowdEventRefund struct {
	Investor common.Address
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterEventRefund is a free log retrieval operation binding the contract event 0xcca3b14e2dd99bd5762da121af2060891ac5835e0beeb5e1fbf018c4563cb69f.
//
// Solidity: event EventRefund(address investor, uint256 value)
func (_Crowd *CrowdFilterer) FilterEventRefund(opts *bind.FilterOpts) (*CrowdEventRefundIterator, error) {

	logs, sub, err := _Crowd.contract.FilterLogs(opts, "EventRefund")
	if err != nil {
		return nil, err
	}
	return &CrowdEventRefundIterator{contract: _Crowd.contract, event: "EventRefund", logs: logs, sub: sub}, nil
}

// WatchEventRefund is a free log subscription operation binding the contract event 0xcca3b14e2dd99bd5762da121af2060891ac5835e0beeb5e1fbf018c4563cb69f.
//
// Solidity: event EventRefund(address investor, uint256 value)
func (_Crowd *CrowdFilterer) WatchEventRefund(opts *bind.WatchOpts, sink chan<- *CrowdEventRefund) (event.Subscription, error) {

	logs, sub, err := _Crowd.contract.WatchLogs(opts, "EventRefund")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrowdEventRefund)
				if err := _Crowd.contract.UnpackLog(event, "EventRefund", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEventRefund is a log parse operation binding the contract event 0xcca3b14e2dd99bd5762da121af2060891ac5835e0beeb5e1fbf018c4563cb69f.
//
// Solidity: event EventRefund(address investor, uint256 value)
func (_Crowd *CrowdFilterer) ParseEventRefund(log types.Log) (*CrowdEventRefund, error) {
	event := new(CrowdEventRefund)
	if err := _Crowd.contract.UnpackLog(event, "EventRefund", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrowdEventTokenAssignmentIterator is returned from FilterEventTokenAssignment and is used to iterate over the raw logs and unpacked data for EventTokenAssignment events raised by the Crowd contract.
type CrowdEventTokenAssignmentIterator struct {
	Event *CrowdEventTokenAssignment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrowdEventTokenAssignmentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrowdEventTokenAssignment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrowdEventTokenAssignment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrowdEventTokenAssignmentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrowdEventTokenAssignmentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrowdEventTokenAssignment represents a EventTokenAssignment event raised by the Crowd contract.
type CrowdEventTokenAssignment struct {
	Investor  common.Address
	NumTokens *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterEventTokenAssignment is a free log retrieval operation binding the contract event 0x9c775d23222cdcdad1e38d4cde5c9379c97ac57f1c84d4449b890b0509a50ad3.
//
// Solidity: event EventTokenAssignment(address indexed investor, uint256 numTokens)
func (_Crowd *CrowdFilterer) FilterEventTokenAssignment(opts *bind.FilterOpts, investor []common.Address) (*CrowdEventTokenAssignmentIterator, error) {

	var investorRule []interface{}
	for _, investorItem := range investor {
		investorRule = append(investorRule, investorItem)
	}

	logs, sub, err := _Crowd.contract.FilterLogs(opts, "EventTokenAssignment", investorRule)
	if err != nil {
		return nil, err
	}
	return &CrowdEventTokenAssignmentIterator{contract: _Crowd.contract, event: "EventTokenAssignment", logs: logs, sub: sub}, nil
}

// WatchEventTokenAssignment is a free log subscription operation binding the contract event 0x9c775d23222cdcdad1e38d4cde5c9379c97ac57f1c84d4449b890b0509a50ad3.
//
// Solidity: event EventTokenAssignment(address indexed investor, uint256 numTokens)
func (_Crowd *CrowdFilterer) WatchEventTokenAssignment(opts *bind.WatchOpts, sink chan<- *CrowdEventTokenAssignment, investor []common.Address) (event.Subscription, error) {

	var investorRule []interface{}
	for _, investorItem := range investor {
		investorRule = append(investorRule, investorItem)
	}

	logs, sub, err := _Crowd.contract.WatchLogs(opts, "EventTokenAssignment", investorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrowdEventTokenAssignment)
				if err := _Crowd.contract.UnpackLog(event, "EventTokenAssignment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEventTokenAssignment is a log parse operation binding the contract event 0x9c775d23222cdcdad1e38d4cde5c9379c97ac57f1c84d4449b890b0509a50ad3.
//
// Solidity: event EventTokenAssignment(address indexed investor, uint256 numTokens)
func (_Crowd *CrowdFilterer) ParseEventTokenAssignment(log types.Log) (*CrowdEventTokenAssignment, error) {
	event := new(CrowdEventTokenAssignment)
	if err := _Crowd.contract.UnpackLog(event, "EventTokenAssignment", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
